{"mappings":"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","sources":["<anon>","js/index.js","js/portfolioManager.mjs","js/utils.mjs","js/apiService.mjs"],"sourcesContent":["// Utility function to retrieve portfolio from localStorage\nfunction $4be524819391b1f0$export$fef51bf2c4a9525a() {\n    const portfolio = localStorage.getItem(\"portfolio\");\n    return portfolio ? JSON.parse(portfolio) : [];\n}\nfunction $4be524819391b1f0$export$6bece5be12040eaa(portfolio) {\n    localStorage.setItem(\"portfolio\", JSON.stringify(portfolio));\n}\n\n\nfunction $17dca17aef154be7$export$e79eac31f08cf075(name, quantity) {\n    const portfolio = (0, $4be524819391b1f0$export$fef51bf2c4a9525a)();\n    const existingCrypto = portfolio.find((crypto)=>crypto.name === name);\n    if (existingCrypto) // If the cryptocurrency already exists, update the quantity\n    existingCrypto.quantity += quantity;\n    else // Otherwise, add a new cryptocurrency\n    portfolio.push({\n        name: name,\n        quantity: quantity\n    });\n    // Save the updated portfolio back to localStorage\n    (0, $4be524819391b1f0$export$6bece5be12040eaa)(portfolio);\n    // Update the displayed total value\n    $17dca17aef154be7$export$486ef8a8a1b65e4d();\n}\nfunction $17dca17aef154be7$export$931c592a5ad597ef(name) {\n    let portfolio = (0, $4be524819391b1f0$export$fef51bf2c4a9525a)();\n    portfolio = portfolio.filter((crypto)=>crypto.name !== name);\n    // Save the updated portfolio back to localStorage\n    (0, $4be524819391b1f0$export$6bece5be12040eaa)(portfolio);\n    // Update the displayed portfolio and total value after removing\n    $17dca17aef154be7$export$44d57974da3eb7d6();\n    $17dca17aef154be7$export$486ef8a8a1b65e4d();\n}\nfunction $17dca17aef154be7$export$8144c307345ce026() {\n    const portfolio = (0, $4be524819391b1f0$export$fef51bf2c4a9525a)();\n    let totalValue = 0;\n    // Simulate value as quantity * price of 1 (this will be replaced by actual API data)\n    portfolio.forEach((crypto)=>{\n        totalValue += crypto.quantity * 1; // Dummy price for now\n    });\n    return totalValue;\n}\nfunction $17dca17aef154be7$export$486ef8a8a1b65e4d() {\n    const totalValue = $17dca17aef154be7$export$8144c307345ce026();\n    document.getElementById(\"portfolio-value\").innerText = totalValue.toFixed(2);\n}\nfunction $17dca17aef154be7$export$44d57974da3eb7d6() {\n    const portfolio = (0, $4be524819391b1f0$export$fef51bf2c4a9525a)();\n    const portfolioContainer = document.getElementById(\"portfolio-container\");\n    portfolioContainer.innerHTML = \"\"; // Clear the container before rendering\n    // If the portfolio is empty\n    if (portfolio.length === 0) {\n        portfolioContainer.innerHTML = \"<p>Your portfolio is empty</p>\";\n        return;\n    }\n    // Render each cryptocurrency in the portfolio\n    portfolio.forEach((crypto)=>{\n        const cryptoItem = document.createElement(\"div\");\n        cryptoItem.className = \"portfolio-item\";\n        cryptoItem.innerHTML = `\n        <p>${crypto.name}: ${crypto.quantity}</p>\n        <button class=\"remove-btn\" data-name=\"${crypto.name}\">Remove</button>\n      `;\n        portfolioContainer.appendChild(cryptoItem);\n    });\n    // Attach event listeners for remove buttons\n    const removeButtons = document.querySelectorAll(\".remove-btn\");\n    removeButtons.forEach((button)=>{\n        button.addEventListener(\"click\", (event)=>{\n            const name = event.target.getAttribute(\"data-name\");\n            $17dca17aef154be7$export$931c592a5ad597ef(name);\n        });\n    });\n}\n\n\nconst $41d417b2272a9e3b$var$API_BASE_URL = \"https://api.coingecko.com/api/v3\";\nasync function $41d417b2272a9e3b$export$1325522f3f6ee7e9(cryptoName) {\n    const url = `${$41d417b2272a9e3b$var$API_BASE_URL}/simple/price?ids=${cryptoName}&vs_currencies=usd`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(`Error fetching price for ${cryptoName}: ${response.statusText}`);\n        const data = await response.json();\n        return data[cryptoName]?.usd || null; // Return the price in USD or null if not found\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\nasync function $41d417b2272a9e3b$export$b70049b5bb47ae69(cryptoName, days = 30) {\n    const url = `${$41d417b2272a9e3b$var$API_BASE_URL}/coins/${cryptoName}/market_chart?vs_currency=usd&days=${days}`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(`Error fetching historical data for ${cryptoName}: ${response.statusText}`);\n        const data = await response.json();\n        return data.prices; // Return price data for the specified days\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\nasync function $41d417b2272a9e3b$export$ff4bf9bc953b5e84(query) {\n    const url = `${$41d417b2272a9e3b$var$API_BASE_URL}/search?query=${query}`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(`Error fetching crypto list: ${response.statusText}`);\n        const data = await response.json();\n        return data.coins.map((coin)=>({\n                id: coin.id,\n                name: coin.name,\n                symbol: coin.symbol\n            }));\n    } catch (error) {\n        console.error(error);\n        return [];\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Render the portfolio on page load\n    (0, $17dca17aef154be7$export$44d57974da3eb7d6)();\n    (0, $17dca17aef154be7$export$486ef8a8a1b65e4d)();\n    // Handle the form submission to add a cryptocurrency\n    document.getElementById(\"crypto-form\").addEventListener(\"submit\", async (event)=>{\n        event.preventDefault();\n        const cryptoName = document.getElementById(\"crypto-name\").value;\n        const cryptoQuantity = parseFloat(document.getElementById(\"crypto-quantity\").value);\n        // Fetch the price of the selected cryptocurrency\n        const cryptoPrice = await (0, $41d417b2272a9e3b$export$1325522f3f6ee7e9)(cryptoName.toLowerCase());\n        if (cryptoPrice) {\n            (0, $17dca17aef154be7$export$e79eac31f08cf075)(cryptoName, cryptoQuantity);\n            // Update the total portfolio value\n            document.getElementById(\"portfolio-value\").innerText = (0, $17dca17aef154be7$export$8144c307345ce026)().toFixed(2);\n            // Clear the form inputs\n            document.getElementById(\"crypto-name\").value = \"\";\n            document.getElementById(\"crypto-quantity\").value = \"\";\n        } else alert(\"Cryptocurrency not found or price unavailable.\");\n    });\n    // Add event listener for searching cryptocurrencies\n    const cryptoInput = document.getElementById(\"crypto-name\");\n    const dropdown = document.getElementById(\"crypto-dropdown\");\n    cryptoInput.addEventListener(\"input\", async (event)=>{\n        const query = event.target.value;\n        // If input is cleared, hide the dropdown\n        if (query.length === 0) {\n            dropdown.innerHTML = \"\";\n            dropdown.style.display = \"none\";\n        } else if (query.length > 2) {\n            const cryptoList = await (0, $41d417b2272a9e3b$export$ff4bf9bc953b5e84)(query);\n            $e5e6023659c13c1d$var$displayCryptoDropdown(cryptoList);\n        }\n    });\n    // Hide the dropdown when clicking outside the input field\n    document.addEventListener(\"click\", (event)=>{\n        const isClickInsideInput = cryptoInput.contains(event.target);\n        const isClickInsideDropdown = dropdown.contains(event.target);\n        if (!isClickInsideInput && !isClickInsideDropdown) dropdown.style.display = \"none\"; // Hide the dropdown\n    });\n    // Show dropdown when the user clicks back into the input\n    cryptoInput.addEventListener(\"focus\", ()=>{\n        if (cryptoInput.value.length > 2) dropdown.style.display = \"block\";\n    });\n});\n// Function to display the dropdown for searching cryptocurrencies\nfunction $e5e6023659c13c1d$var$displayCryptoDropdown(cryptoList) {\n    const dropdown = document.getElementById(\"crypto-dropdown\");\n    dropdown.innerHTML = \"\"; // Clear the dropdown\n    if (cryptoList.length > 0) {\n        cryptoList.forEach((crypto)=>{\n            const option = document.createElement(\"div\");\n            option.classList.add(\"dropdown-item\");\n            option.textContent = `${crypto.name} (${crypto.symbol.toUpperCase()})`;\n            option.dataset.id = crypto.id;\n            option.addEventListener(\"click\", ()=>{\n                document.getElementById(\"crypto-name\").value = crypto.name;\n                dropdown.innerHTML = \"\"; // Clear dropdown after selection\n                dropdown.style.display = \"none\";\n            });\n            dropdown.appendChild(option);\n        });\n        dropdown.style.display = \"block\"; // Show the dropdown\n    } else dropdown.style.display = \"none\"; // Hide the dropdown if no results\n}\n\n\n//# sourceMappingURL=index.3a4b875a.js.map\n","import {\n  addCrypto,\n  getTotalValue,\n  renderPortfolio,\n  updateTotalValue,\n} from \"./portfolioManager.mjs\";\nimport { fetchCryptoList, fetchCryptoPrice } from \"./apiService.mjs\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Render the portfolio on page load\n  renderPortfolio();\n  updateTotalValue();\n\n  // Handle the form submission to add a cryptocurrency\n  document\n    .getElementById(\"crypto-form\")\n    .addEventListener(\"submit\", async (event) => {\n      event.preventDefault();\n\n      const cryptoName = document.getElementById(\"crypto-name\").value;\n      const cryptoQuantity = parseFloat(\n        document.getElementById(\"crypto-quantity\").value\n      );\n\n      // Fetch the price of the selected cryptocurrency\n      const cryptoPrice = await fetchCryptoPrice(cryptoName.toLowerCase());\n\n      if (cryptoPrice) {\n        addCrypto(cryptoName, cryptoQuantity);\n        // Update the total portfolio value\n        document.getElementById(\"portfolio-value\").innerText =\n          getTotalValue().toFixed(2);\n        // Clear the form inputs\n        document.getElementById(\"crypto-name\").value = \"\";\n        document.getElementById(\"crypto-quantity\").value = \"\";\n      } else {\n        alert(\"Cryptocurrency not found or price unavailable.\");\n      }\n    });\n\n  // Add event listener for searching cryptocurrencies\n  const cryptoInput = document.getElementById(\"crypto-name\");\n  const dropdown = document.getElementById('crypto-dropdown');\n\n  cryptoInput.addEventListener(\"input\", async (event) => {\n    const query = event.target.value;\n    \n    // If input is cleared, hide the dropdown\n    if (query.length === 0) {\n        dropdown.innerHTML = '';\n        dropdown.style.display = 'none';\n    } else if (query.length > 2) {\n        const cryptoList = await fetchCryptoList(query);\n        displayCryptoDropdown(cryptoList);\n    }\n  });\n\n  // Hide the dropdown when clicking outside the input field\n  document.addEventListener('click', (event) => {\n    const isClickInsideInput = cryptoInput.contains(event.target);\n    const isClickInsideDropdown = dropdown.contains(event.target);\n\n    if (!isClickInsideInput && !isClickInsideDropdown) {\n      dropdown.style.display = 'none'; // Hide the dropdown\n    }\n  });\n\n  // Show dropdown when the user clicks back into the input\n  cryptoInput.addEventListener('focus', () => {\n    if (cryptoInput.value.length > 2) {\n      dropdown.style.display = 'block';\n    }\n  });\n});\n\n// Function to display the dropdown for searching cryptocurrencies\nfunction displayCryptoDropdown(cryptoList) {\n    const dropdown = document.getElementById('crypto-dropdown');\n    dropdown.innerHTML = ''; // Clear the dropdown\n  \n    if (cryptoList.length > 0) {\n      cryptoList.forEach(crypto => {\n        const option = document.createElement('div');\n        option.classList.add('dropdown-item');\n        option.textContent = `${crypto.name} (${crypto.symbol.toUpperCase()})`;\n        option.dataset.id = crypto.id;\n        option.addEventListener('click', () => {\n          document.getElementById('crypto-name').value = crypto.name;\n          dropdown.innerHTML = ''; // Clear dropdown after selection\n          dropdown.style.display = 'none';\n        });\n        dropdown.appendChild(option);\n      });\n      dropdown.style.display = 'block'; // Show the dropdown\n    } else {\n      dropdown.style.display = 'none'; // Hide the dropdown if no results\n    }\n  }","import { getPortfolio, savePortfolio } from './utils.mjs';\n\n// Function to add a cryptocurrency to the portfolio\nexport function addCrypto(name, quantity) {\n  const portfolio = getPortfolio();\n  const existingCrypto = portfolio.find(crypto => crypto.name === name);\n\n  if (existingCrypto) {\n    // If the cryptocurrency already exists, update the quantity\n    existingCrypto.quantity += quantity;\n  } else {\n    // Otherwise, add a new cryptocurrency\n    portfolio.push({ name, quantity });\n  }\n\n  // Save the updated portfolio back to localStorage\n  savePortfolio(portfolio);\n\n   // Update the displayed total value\n   updateTotalValue();\n}\n\n// Function to remove a cryptocurrency from the portfolio\nexport function removeCrypto(name) {\n  let portfolio = getPortfolio();\n  portfolio = portfolio.filter(crypto => crypto.name !== name);\n\n  // Save the updated portfolio back to localStorage\n  savePortfolio(portfolio);\n  // Update the displayed portfolio and total value after removing\n  renderPortfolio();\n  updateTotalValue();\n}\n\n// Function to get the total value of the portfolio\nexport function getTotalValue() {\n  const portfolio = getPortfolio();\n  let totalValue = 0;\n\n  // Simulate value as quantity * price of 1 (this will be replaced by actual API data)\n  portfolio.forEach(crypto => {\n    totalValue += crypto.quantity * 1; // Dummy price for now\n  });\n\n  return totalValue;\n}\n\n// Function to update the displayed total value in the UI\nexport function updateTotalValue() {\n    const totalValue = getTotalValue();\n    document.getElementById('portfolio-value').innerText = totalValue.toFixed(2);\n}\n\n\n// Function to render the portfolio in the UI\nexport function renderPortfolio() {\n    const portfolio = getPortfolio();\n    const portfolioContainer = document.getElementById('portfolio-container');\n  \n    portfolioContainer.innerHTML = ''; // Clear the container before rendering\n  \n    // If the portfolio is empty\n    if (portfolio.length === 0) {\n      portfolioContainer.innerHTML = '<p>Your portfolio is empty</p>';\n      return;\n    }\n  \n    // Render each cryptocurrency in the portfolio\n    portfolio.forEach(crypto => {\n      const cryptoItem = document.createElement('div');\n      cryptoItem.className = 'portfolio-item';\n      cryptoItem.innerHTML = `\n        <p>${crypto.name}: ${crypto.quantity}</p>\n        <button class=\"remove-btn\" data-name=\"${crypto.name}\">Remove</button>\n      `;\n      portfolioContainer.appendChild(cryptoItem);\n    });\n  \n    // Attach event listeners for remove buttons\n    const removeButtons = document.querySelectorAll('.remove-btn');\n    removeButtons.forEach(button => {\n      button.addEventListener('click', (event) => {\n        const name = event.target.getAttribute('data-name');\n        removeCrypto(name);\n      });\n    });\n}\n","// Utility function to retrieve portfolio from localStorage\nexport function getPortfolio() {\n    const portfolio = localStorage.getItem('portfolio');\n    return portfolio ? JSON.parse(portfolio) : [];\n}\n  \n// Utility function to save portfolio to localStorage\nexport function savePortfolio(portfolio) {\n    localStorage.setItem('portfolio', JSON.stringify(portfolio));\n}","const API_BASE_URL = 'https://api.coingecko.com/api/v3';\n\nexport async function fetchCryptoPrice(cryptoName) {\n    const url = `${API_BASE_URL}/simple/price?ids=${cryptoName}&vs_currencies=usd`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Error fetching price for ${cryptoName}: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data[cryptoName]?.usd || null; // Return the price in USD or null if not found\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\n\nexport async function fetchHistoricalData(cryptoName, days = 30) {\n    const url = `${API_BASE_URL}/coins/${cryptoName}/market_chart?vs_currency=usd&days=${days}`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Error fetching historical data for ${cryptoName}: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data.prices; // Return price data for the specified days\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n}\n\n// Fetch a list of cryptocurrencies based on user input (search)\nexport async function fetchCryptoList(query) {\n    const url = `${API_BASE_URL}/search?query=${query}`;\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Error fetching crypto list: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data.coins.map(coin => ({\n            id: coin.id,\n            name: coin.name,\n            symbol: coin.symbol\n        }));\n    } catch (error) {\n        console.error(error);\n        return [];\n    }\n}\n"],"names":["$4be524819391b1f0$export$fef51bf2c4a9525a","portfolio","localStorage","getItem","JSON","parse","$4be524819391b1f0$export$6bece5be12040eaa","setItem","stringify","$17dca17aef154be7$export$8144c307345ce026","totalValue","forEach","crypto","quantity","$17dca17aef154be7$export$486ef8a8a1b65e4d","document","getElementById","innerText","toFixed","$41d417b2272a9e3b$var$API_BASE_URL","$41d417b2272a9e3b$export$1325522f3f6ee7e9","cryptoName","url","response","fetch","ok","Error","statusText","data","json","usd","error","console","$41d417b2272a9e3b$export$ff4bf9bc953b5e84","query","coins","map","coin","id","name","symbol","addEventListener","$17dca17aef154be7$export$44d57974da3eb7d6","portfolioContainer","innerHTML","length","cryptoItem","createElement","className","appendChild","removeButtons","querySelectorAll","button","event","target","getAttribute","filter","preventDefault","value","cryptoQuantity","parseFloat","toLowerCase","existingCrypto","find","push","alert","cryptoInput","dropdown","style","display","$e5e6023659c13c1d$var$displayCryptoDropdown","cryptoList","option","classList","add","textContent","toUpperCase","dataset","isClickInsideInput","contains","isClickInsideDropdown"],"version":3,"file":"index.3a4b875a.js.map"}